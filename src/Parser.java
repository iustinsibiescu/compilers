
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\015" +
    "\000\002\003\012\000\002\004\005\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\006\002\000\002" +
    "\007\006\000\002\010\004\000\002\010\003\000\002\011" +
    "\011\000\002\012\013\000\002\012\011\000\002\013\004" +
    "\000\002\013\003\000\002\014\004\000\002\014\003\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\020\005\000\002\017\004\000" +
    "\002\021\007\000\002\021\005\000\002\022\005\000\002" +
    "\023\007\000\002\023\005\000\002\023\002\000\002\024" +
    "\007\000\002\024\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\007\000" +
    "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
    "\026\002\000\002\027\010\000\002\027\007\000\002\027" +
    "\007\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\034\006\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\036\006\000\002\037\005\000\002\037\003\000\002\040" +
    "\005\000\002\040\003\000\002\040\003\000\002\041\005" +
    "\000\002\041\003\000\002\042\005\000\002\042\005\000" +
    "\002\042\003\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\003\000\002\044" +
    "\005\000\002\044\005\000\002\044\003\000\002\045\005" +
    "\000\002\045\005\000\002\045\003\000\002\046\004\000" +
    "\002\046\004\000\002\046\003\000\002\047\005\000\002" +
    "\047\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\010\004\012\055\005\065\010\001\002\000" +
    "\004\042\313\001\002\000\004\060\310\001\002\000\010" +
    "\002\ufffd\004\012\065\010\001\002\000\004\002\306\001" +
    "\002\000\004\004\221\001\002\000\006\042\215\044\217" +
    "\001\002\000\004\043\026\001\002\000\004\042\025\001" +
    "\002\000\004\042\024\001\002\000\010\004\012\055\005" +
    "\065\010\001\002\000\004\042\020\001\002\000\020\002" +
    "\uffee\004\uffee\045\uffee\051\uffee\055\uffee\064\uffee\065\uffee" +
    "\001\002\000\020\002\uffe4\004\uffe4\045\uffe4\051\uffe4\055" +
    "\uffe4\064\uffe4\065\uffe4\001\002\000\010\002\uffff\004\012" +
    "\065\010\001\002\000\020\002\uffef\004\uffef\045\uffef\051" +
    "\uffef\055\uffef\064\uffef\065\uffef\001\002\000\010\002\001" +
    "\004\012\065\010\001\002\000\020\002\uffe3\004\uffe3\045" +
    "\uffe3\051\uffe3\055\uffe3\064\uffe3\065\uffe3\001\002\000\020" +
    "\002\uffe1\004\uffe1\045\uffe1\051\uffe1\055\uffe1\064\uffe1\065" +
    "\uffe1\001\002\000\020\005\036\006\030\007\033\010\031" +
    "\011\035\012\034\013\027\001\002\000\006\042\uffd7\044" +
    "\211\001\002\000\012\024\uffc2\042\uffc2\044\uffc2\062\uffc2" +
    "\001\002\000\012\024\uffc4\042\uffc4\044\uffc4\062\uffc4\001" +
    "\002\000\012\024\uffe0\042\uffe0\044\uffe0\062\uffe0\001\002" +
    "\000\012\024\uffc6\042\uffc6\044\uffc6\062\uffc6\001\002\000" +
    "\006\042\uffdd\044\037\001\002\000\012\024\uffc5\042\uffc5" +
    "\044\uffc5\062\uffc5\001\002\000\012\024\uffc3\042\uffc3\044" +
    "\uffc3\062\uffc3\001\002\000\004\060\040\001\002\000\024" +
    "\004\052\014\053\015\054\016\044\017\043\020\051\021" +
    "\056\022\050\061\uffd9\001\002\000\004\042\uffde\001\002" +
    "\000\050\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\042\uffc0\043\uffc0\054\uffc0\057\uffc0\061\uffc0\062" +
    "\uffc0\001\002\000\050\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\042\uff98\043\uff98\054\uff98\057\uff98" +
    "\061\uff98\062\uff98\001\002\000\050\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\042\uff99\043\uff99\054" +
    "\uff99\057\uff99\061\uff99\062\uff99\001\002\000\050\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\042\uffba" +
    "\043\uffba\054\uffba\057\uffba\061\uffba\062\uffba\001\002\000" +
    "\050\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\042\uffbb\043\uffbb\054\uffbb\057\uffbb\061\uffbb\062\uffbb" +
    "\001\002\000\004\043\205\001\002\000\050\024\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\042\uff97\043" +
    "\uff97\054\uff97\057\uff97\061\uff97\062\uff97\001\002\000\050" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\042\uffbd\043\uffbd\054\uffbd\057\uffbd\061\uffbd\062\uffbd\001" +
    "\002\000\054\023\060\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\054\uffc1\056\061" +
    "\057\uffc1\061\uffc1\062\uffc1\001\002\000\050\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\043" +
    "\uffbf\054\uffbf\057\uffbf\061\uffbf\062\uffbf\001\002\000\050" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\042\uffbe\043\uffbe\054\uffbe\057\uffbe\061\uffbe\062\uffbe\001" +
    "\002\000\004\061\057\001\002\000\050\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc" +
    "\054\uffbc\057\uffbc\061\uffbc\062\uffbc\001\002\000\016\024" +
    "\uffdc\040\uffdc\042\uffdc\054\uffdc\057\uffdc\062\uffdc\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\022\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\001\002\000\004\057\063\001\002" +
    "\000\050\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\042\uffb9\043\uffb9\054\uffb9\057\uffb9\061\uffb9\062" +
    "\uffb9\001\002\000\040\024\uffa5\025\175\026\176\031\173" +
    "\032\172\033\171\034\174\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\042\uffa5\054\uffa5\057\uffa5\062\uffa5\001\002\000\024" +
    "\024\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\054" +
    "\uffaa\057\uffaa\062\uffaa\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\044\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\042\uff9a\054\uff9a" +
    "\057\uff9a\062\uff9a\001\002\000\024\024\uffad\035\112\036" +
    "\113\037\uffad\040\uffad\042\uffad\054\uffad\057\uffad\062\uffad" +
    "\001\002\000\044\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\042\uff9f\054\uff9f\057\uff9f\062\uff9f\001" +
    "\002\000\012\024\uffb2\040\120\054\117\062\116\001\002" +
    "\000\044\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\042\uff9c\054\uff9c\057\uff9c\062\uff9c\001\002\000" +
    "\020\024\uffb0\037\110\040\uffb0\042\uffb0\054\uffb0\057\uffb0" +
    "\062\uffb0\001\002\000\044\024\uffa2\025\uffa2\026\uffa2\027" +
    "\105\030\104\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\042\uffa2\054\uffa2\057\uffa2\062" +
    "\uffa2\001\002\000\030\004\052\014\053\015\054\016\044" +
    "\017\043\020\051\021\056\022\050\023\067\026\077\041" +
    "\066\001\002\000\016\024\uffaf\040\uffaf\042\uffaf\054\uffaf" +
    "\057\uffaf\062\uffaf\001\002\000\004\024\102\001\002\000" +
    "\050\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\042\uffb4\043\uffb4\054\uffb4\057\uffb4\061\uffb4\062\uffb4" +
    "\001\002\000\044\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\042\uff9d\054\uff9d\057\uff9d\062\uff9d\001" +
    "\002\000\030\004\052\014\053\015\054\016\044\017\043" +
    "\020\051\021\056\022\050\023\067\026\077\041\066\001" +
    "\002\000\030\004\052\014\053\015\054\016\044\017\043" +
    "\020\051\021\056\022\050\023\067\026\077\041\066\001" +
    "\002\000\044\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\042\uffa1\054\uffa1\057\uffa1\062\uffa1\001\002" +
    "\000\044\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\042\uffa0\054\uffa0\057\uffa0\062\uffa0\001\002\000" +
    "\030\004\052\014\053\015\054\016\044\017\043\020\051" +
    "\021\056\022\050\023\067\026\077\041\066\001\002\000" +
    "\024\024\uffae\035\112\036\113\037\uffae\040\uffae\042\uffae" +
    "\054\uffae\057\uffae\062\uffae\001\002\000\030\004\052\014" +
    "\053\015\054\016\044\017\043\020\051\021\056\022\050" +
    "\023\067\026\077\041\066\001\002\000\030\004\052\014" +
    "\053\015\054\016\044\017\043\020\051\021\056\022\050" +
    "\023\067\026\077\041\066\001\002\000\024\024\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\042\uffab\054\uffab\057\uffab" +
    "\062\uffab\001\002\000\024\024\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\042\uffac\054\uffac\057\uffac\062\uffac\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\010\004\122\056\127\060\040\001\002\000\030\004" +
    "\052\014\053\015\054\016\044\017\043\020\051\021\056" +
    "\022\050\023\067\026\077\041\066\001\002\000\020\024" +
    "\uffb1\037\110\040\uffb1\042\uffb1\054\uffb1\057\uffb1\062\uffb1" +
    "\001\002\000\020\024\uffb6\040\uffb6\042\uffb6\054\uffb6\056" +
    "\142\057\uffb6\062\uffb6\001\002\000\016\024\uffb5\040\uffb5" +
    "\042\uffb5\054\uffb5\057\uffb5\062\uffb5\001\002\000\016\024" +
    "\uffb8\040\uffb8\042\uffb8\054\uffb8\057\uffb8\062\uffb8\001\002" +
    "\000\016\024\uffd5\040\uffd5\042\uffd5\054\uffd5\057\uffd5\062" +
    "\uffd5\001\002\000\016\024\uffb7\040\uffb7\042\uffb7\054\uffb7" +
    "\057\uffb7\062\uffb7\001\002\000\034\004\131\014\053\015" +
    "\054\016\044\017\043\020\051\021\056\022\050\023\067" +
    "\026\077\041\066\056\130\057\uffce\001\002\000\034\004" +
    "\131\014\053\015\054\016\044\017\043\020\051\021\056" +
    "\022\050\023\067\026\077\041\066\056\130\057\uffce\001" +
    "\002\000\044\023\060\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\054\uffc1\056\142\057\uffc1\062\uffc1\001\002" +
    "\000\012\040\120\054\117\057\uffd3\062\140\001\002\000" +
    "\004\057\137\001\002\000\006\057\uffcf\062\135\001\002" +
    "\000\034\004\131\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\056\130" +
    "\057\uffce\001\002\000\004\057\uffd0\001\002\000\016\024" +
    "\uffd6\040\uffd6\042\uffd6\054\uffd6\057\uffd6\062\uffd6\001\002" +
    "\000\034\004\131\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\056\130" +
    "\057\uffce\001\002\000\004\057\uffd4\001\002\000\024\004" +
    "\146\014\053\015\054\016\144\017\043\020\051\021\056" +
    "\022\050\043\143\001\002\000\006\004\151\016\154\001" +
    "\002\000\006\043\uffc9\057\uff99\001\002\000\006\043\uffc8" +
    "\057\uffbb\001\002\000\012\023\060\043\uffca\056\061\057" +
    "\uffc1\001\002\000\004\043\150\001\002\000\010\004\151" +
    "\016\154\057\152\001\002\000\010\023\060\043\uffca\057" +
    "\uffca\001\002\000\016\024\uffcb\040\uffcb\042\uffcb\054\uffcb" +
    "\057\uffcb\062\uffcb\001\002\000\004\057\156\001\002\000" +
    "\006\043\uffc9\057\uffc9\001\002\000\006\043\uffc8\057\uffc8" +
    "\001\002\000\016\024\uffcd\040\uffcd\042\uffcd\054\uffcd\057" +
    "\uffcd\062\uffcd\001\002\000\004\057\160\001\002\000\016" +
    "\024\uffcc\040\uffcc\042\uffcc\054\uffcc\057\uffcc\062\uffcc\001" +
    "\002\000\004\057\162\001\002\000\006\057\uffd1\062\163" +
    "\001\002\000\034\004\131\014\053\015\054\016\044\017" +
    "\043\020\051\021\056\022\050\023\067\026\077\041\066" +
    "\056\130\057\uffce\001\002\000\004\057\uffd2\001\002\000" +
    "\004\024\uffb3\001\002\000\010\024\167\040\120\054\117" +
    "\001\002\000\044\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\037\uff9b\040\uff9b\042\uff9b\054\uff9b\057\uff9b\062\uff9b\001" +
    "\002\000\044\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\042\uff9e\054\uff9e\057\uff9e\062\uff9e\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\030\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\001\002" +
    "\000\044\024\uffa3\025\uffa3\026\uffa3\027\105\030\104\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\042\uffa3\054\uffa3\057\uffa3\062\uffa3\001\002\000" +
    "\044\024\uffa4\025\uffa4\026\uffa4\027\105\030\104\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\042\uffa4\054\uffa4\057\uffa4\062\uffa4\001\002\000\030" +
    "\024\uffa8\025\175\026\176\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\042\uffa8\054\uffa8\057\uffa8\062\uffa8\001\002\000\030" +
    "\024\uffa6\025\175\026\176\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\042\uffa6\054\uffa6\057\uffa6\062\uffa6\001\002\000\030" +
    "\024\uffa7\025\175\026\176\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\042\uffa7\054\uffa7\057\uffa7\062\uffa7\001\002\000\030" +
    "\024\uffa9\025\175\026\176\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\042\uffa9\054\uffa9\057\uffa9\062\uffa9\001\002\000\022" +
    "\004\052\014\053\015\054\016\044\017\043\020\051\021" +
    "\056\022\050\001\002\000\006\061\uffda\062\207\001\002" +
    "\000\024\004\052\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\061\uffd9\001\002\000\004\061\uffdb" +
    "\001\002\000\006\004\212\056\127\001\002\000\004\056" +
    "\214\001\002\000\004\042\uffd8\001\002\000\010\004\151" +
    "\016\154\043\143\001\002\000\020\002\uffe5\004\uffe5\045" +
    "\uffe5\051\uffe5\055\uffe5\064\uffe5\065\uffe5\001\002\000\004" +
    "\042\uffdf\001\002\000\030\004\052\014\053\015\054\016" +
    "\044\017\043\020\051\021\056\022\050\023\067\026\077" +
    "\041\066\001\002\000\010\040\120\042\uffc7\054\117\001" +
    "\002\000\004\023\222\001\002\000\006\004\223\024\ufff6" +
    "\001\002\000\004\043\305\001\002\000\004\024\230\001" +
    "\002\000\006\024\ufff7\062\226\001\002\000\006\004\223" +
    "\024\ufff6\001\002\000\004\024\ufff8\001\002\000\004\060" +
    "\231\001\002\000\014\004\236\045\234\051\232\064\243" +
    "\065\010\001\002\000\004\023\277\001\002\000\004\042" +
    "\276\001\002\000\004\023\265\001\002\000\014\004\236" +
    "\045\234\051\232\064\243\065\010\001\002\000\012\023" +
    "\060\043\026\044\217\056\061\001\002\000\006\061\255" +
    "\063\253\001\002\000\004\042\252\001\002\000\024\004" +
    "\247\045\234\046\ufff3\050\ufff3\051\232\053\ufff3\061\ufff3" +
    "\063\ufff3\064\243\001\002\000\024\004\uffe8\045\uffe8\046" +
    "\uffe8\050\uffe8\051\uffe8\053\uffe8\061\uffe8\063\uffe8\064\uffe8" +
    "\001\002\000\024\004\uffe6\045\uffe6\046\uffe6\050\uffe6\051" +
    "\uffe6\053\uffe6\061\uffe6\063\uffe6\064\uffe6\001\002\000\024" +
    "\004\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7\053\uffe7\061" +
    "\uffe7\063\uffe7\064\uffe7\001\002\000\024\004\uffec\045\uffec" +
    "\046\uffec\050\uffec\051\uffec\053\uffec\061\uffec\063\uffec\064" +
    "\uffec\001\002\000\024\004\uffed\045\uffed\046\uffed\050\uffed" +
    "\051\uffed\053\uffed\061\uffed\063\uffed\064\uffed\001\002\000" +
    "\010\023\060\044\217\056\061\001\002\000\004\042\251" +
    "\001\002\000\024\004\uffeb\045\uffeb\046\uffeb\050\uffeb\051" +
    "\uffeb\053\uffeb\061\uffeb\063\uffeb\064\uffeb\001\002\000\024" +
    "\004\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\053\uffe9\061" +
    "\uffe9\063\uffe9\064\uffe9\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\004\061\256\001\002" +
    "\000\004\042\ufffb\001\002\000\004\043\257\001\002\000" +
    "\014\005\036\006\030\007\033\010\031\011\035\001\002" +
    "\000\004\042\ufffc\001\002\000\010\040\120\042\ufff9\054" +
    "\117\001\002\000\004\042\263\001\002\000\004\061\ufffa" +
    "\001\002\000\024\004\247\045\234\046\ufff4\050\ufff4\051" +
    "\232\053\ufff4\061\ufff4\063\ufff4\064\243\001\002\000\030" +
    "\004\052\014\053\015\054\016\044\017\043\020\051\021" +
    "\056\022\050\023\067\026\077\041\066\001\002\000\010" +
    "\024\267\040\120\054\117\001\002\000\004\047\270\001" +
    "\002\000\014\004\236\045\234\051\232\064\243\065\010" +
    "\001\002\000\006\046\272\050\273\001\002\000\024\004" +
    "\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\053\ufff0\061\ufff0" +
    "\063\ufff0\064\ufff0\001\002\000\014\004\236\045\234\051" +
    "\232\064\243\065\010\001\002\000\004\046\275\001\002" +
    "\000\024\004\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\053" +
    "\ufff1\061\ufff1\063\ufff1\064\ufff1\001\002\000\024\004\uffea" +
    "\045\uffea\046\uffea\050\uffea\051\uffea\053\uffea\061\uffea\063" +
    "\uffea\064\uffea\001\002\000\030\004\052\014\053\015\054" +
    "\016\044\017\043\020\051\021\056\022\050\023\067\026" +
    "\077\041\066\001\002\000\010\024\301\040\120\054\117" +
    "\001\002\000\004\052\302\001\002\000\014\004\236\045" +
    "\234\051\232\064\243\065\010\001\002\000\004\053\304" +
    "\001\002\000\024\004\ufff2\045\ufff2\046\ufff2\050\ufff2\051" +
    "\ufff2\053\ufff2\061\ufff2\063\ufff2\064\ufff2\001\002\000\014" +
    "\005\036\006\030\007\033\010\031\011\035\001\002\000" +
    "\004\002\000\001\002\000\010\002\ufffe\004\012\065\010" +
    "\001\002\000\014\004\236\045\234\051\232\064\243\065" +
    "\010\001\002\000\004\061\312\001\002\000\010\002\ufff5" +
    "\004\ufff5\065\ufff5\001\002\000\020\002\uffe2\004\uffe2\045" +
    "\uffe2\051\uffe2\055\uffe2\064\uffe2\065\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\024\002\006\003\012\007\005\013\014\016" +
    "\016\017\015\020\010\021\013\024\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\012\013\306\016" +
    "\016\017\015\020\010\021\013\024\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\012\007\020\016\021\017\015\020\010\021\013\024" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\012\013\022\016\016\017\015\020" +
    "\010\021\013\024\003\001\001\000\002\001\001\000\016" +
    "\003\012\016\021\017\015\020\010\021\013\024\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\040\001" +
    "\001\000\014\023\054\033\046\034\044\036\045\050\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\033" +
    "\067\034\044\035\077\036\045\037\100\040\072\041\074" +
    "\042\070\043\064\044\063\045\075\046\071\047\073\050" +
    "\041\001\001\000\012\033\061\034\044\036\045\050\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\033\067\034\044\036\045" +
    "\046\167\047\073\050\041\001\001\000\034\033\067\034" +
    "\044\035\077\036\045\040\165\041\074\042\070\043\064" +
    "\044\063\045\075\046\071\047\073\050\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\033\067\034\044\036\045\046\102\047\073" +
    "\050\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\033\067\034\044" +
    "\036\045\046\106\047\073\050\041\001\001\000\016\033" +
    "\067\034\044\036\045\046\105\047\073\050\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\033\067\034" +
    "\044\036\045\042\110\043\064\044\063\045\075\046\071" +
    "\047\073\050\041\001\001\000\002\001\001\000\024\033" +
    "\067\034\044\036\045\043\114\044\063\045\075\046\071" +
    "\047\073\050\041\001\001\000\024\033\067\034\044\036" +
    "\045\043\113\044\063\045\075\046\071\047\073\050\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\033" +
    "\067\034\044\035\077\036\045\037\164\040\072\041\074" +
    "\042\070\043\064\044\063\045\075\046\071\047\073\050" +
    "\041\001\001\000\012\022\123\025\125\027\124\034\122" +
    "\001\001\000\030\033\067\034\044\036\045\041\120\042" +
    "\070\043\064\044\063\045\075\046\071\047\073\050\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\026\132\027\133\033\067\034\044\035\077\036" +
    "\045\040\131\041\074\042\070\043\064\044\063\045\075" +
    "\046\071\047\073\050\041\001\001\000\040\026\160\027" +
    "\133\033\067\034\044\035\077\036\045\040\131\041\074" +
    "\042\070\043\064\044\063\045\075\046\071\047\073\050" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\026\135\027\133\033" +
    "\067\034\044\035\077\036\045\040\131\041\074\042\070" +
    "\043\064\044\063\045\075\046\071\047\073\050\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\026\140" +
    "\027\133\033\067\034\044\035\077\036\045\040\131\041" +
    "\074\042\070\043\064\044\063\045\075\046\071\047\073" +
    "\050\041\001\001\000\002\001\001\000\014\030\146\033" +
    "\061\034\044\036\144\050\041\001\001\000\006\030\156" +
    "\036\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\152\036\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\026\163\027\133\033\067\034\044" +
    "\035\077\036\045\040\131\041\074\042\070\043\064\044" +
    "\063\045\075\046\071\047\073\050\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\033\067\034\044\036\045" +
    "\044\203\045\075\046\071\047\073\050\041\001\001\000" +
    "\022\033\067\034\044\036\045\044\202\045\075\046\071" +
    "\047\073\050\041\001\001\000\022\033\067\034\044\036" +
    "\045\044\201\045\075\046\071\047\073\050\041\001\001" +
    "\000\022\033\067\034\044\036\045\044\200\045\075\046" +
    "\071\047\073\050\041\001\001\000\020\033\067\034\044" +
    "\036\045\045\177\046\071\047\073\050\041\001\001\000" +
    "\020\033\067\034\044\036\045\045\176\046\071\047\073" +
    "\050\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\033\205\034\044\036\045\050\041\001" +
    "\001\000\002\001\001\000\014\023\207\033\046\034\044" +
    "\036\045\050\041\001\001\000\002\001\001\000\006\025" +
    "\212\027\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\146\036\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\033\067\034\044\035\077\036\045" +
    "\040\217\041\074\042\070\043\064\044\063\045\075\046" +
    "\071\047\073\050\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\223\020\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\226" +
    "\020\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\012\010\236\011\243\012\241\013\234\014\240" +
    "\015\244\016\016\017\015\020\010\021\013\024\003\034" +
    "\237\036\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\012\011\243\012\241\014" +
    "\263\015\244\016\021\017\015\020\010\021\013\024\003" +
    "\034\237\036\232\001\001\000\004\031\247\001\001\000" +
    "\004\004\253\001\001\000\002\001\001\000\014\011\243" +
    "\012\241\015\245\034\237\036\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\261" +
    "\033\067\034\044\035\077\036\045\040\260\041\074\042" +
    "\070\043\064\044\063\045\075\046\071\047\073\050\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\243\012\241\015\245\034\237\036\232\001\001\000\034" +
    "\033\067\034\044\035\077\036\045\040\265\041\074\042" +
    "\070\043\064\044\063\045\075\046\071\047\073\050\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\012\010\270\011\243\012\241\013\234\014\240\015\244" +
    "\016\016\017\015\020\010\021\013\024\003\034\237\036" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\012\010\273\011\243\012\241\013\234\014\240\015" +
    "\244\016\016\017\015\020\010\021\013\024\003\034\237" +
    "\036\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\033\067\034\044\035\077\036\045" +
    "\040\277\041\074\042\070\043\064\044\063\045\075\046" +
    "\071\047\073\050\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\012\010\302\011\243\012\241\013" +
    "\234\014\240\015\244\016\016\017\015\020\010\021\013" +
    "\024\003\034\237\036\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\031\001\001\000\002\001\001" +
    "\000\016\003\012\016\021\017\015\020\010\021\013\024" +
    "\003\001\001\000\036\003\012\010\310\011\243\012\241" +
    "\013\234\014\240\015\244\016\016\017\015\020\010\021" +
    "\013\024\003\034\237\036\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
	boolean syntaxErrors;

	public void syntax_error(Symbol current_token) {
	syntaxErrors = true;
	report_error(
		"Syntax error at line " + (current_token.left+1) + ", column "
		+ current_token.right + current_token.toString() +"\n\n\n\n\n", null
	);
	}
	public void report_fatal_error(String message, Object info) {
		report_error("", null);
		done_parsing();
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declrs main declrs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declrs main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= main declrs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declr ::= FDEF ID LPAREN formal_param_list RPAREN LCURL body return RCURL COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declr ::= FDEF ID LPAREN formal_param_list RPAREN LCURL body RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN return_val SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return_val ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_val",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal_param_list ::= normal_declr COMMA formal_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_param_list ::= normal_declr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_param_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main ::= MAIN LCURL body RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= declrs stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // whileblock ::= WHILE LPAREN bool RPAREN DO body OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileblock",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ifblock ::= IF LPAREN bool RPAREN THEN body ELSE body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifblock",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ifblock ::= IF LPAREN bool RPAREN THEN body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifblock",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declrs ::= declrs declr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declrs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declrs ::= declr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declrs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmts ::= stmts stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= ID assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= array_element SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= ifblock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= whileblock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= MAIN_RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declr ::= normal_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declr ::= init_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declr ::= dict_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declr ::= seq_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declr ::= function_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // normal_declr ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normal_declr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // init_declr ::= normal_declr assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dict_declr ::= ID COLON DICT_TYPE ASSIGN dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_declr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dict_declr ::= ID COLON DICT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_declr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dict_value ::= LCURL dict_body RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_value",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dict_body ::= loc COLON loc COMMA dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dict_body ::= loc COLON loc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dict_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // seq_declr ::= ID COLON SEQ_TYPE ASSIGN seq_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_declr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // seq_declr ::= ID COLON SEQ_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_declr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // seq_value ::= LBRACKET seq_elements RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // seq_value ::= slicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // seq_elements ::= bool COMMA seq_elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // seq_elements ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seq_elements ::= LBRACKET seq_elements RBRACKET COMMA seq_elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seq_elements ::= LBRACKET seq_elements RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // seq_elements ::= slicing COMMA seq_elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // seq_elements ::= slicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // seq_elements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // slicing ::= ID LBRACKET slicing_index COLON slicing_index RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // slicing ::= ID LBRACKET COLON slicing_index RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // slicing ::= ID LBRACKET slicing_index COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // slicing_index ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing_index",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // slicing_index ::= INTEGER_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing_index",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // slicing_index ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing_index",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= ASSIGN bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= INTEGER_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= FLOAT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= RATIONAL_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= BOOLEAN_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= CHARACTER_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // loc ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // loc ::= numerical_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loc ::= BOOLEAN_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loc ::= CHARACTER_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // loc ::= DICT_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // loc ::= SEQ_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // loc ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // loc ::= array_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // array_element ::= ID LBRACKET loc RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_element",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // in_block ::= bool IN dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // in_block ::= bool IN seq_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // in_block ::= bool IN ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // in_block ::= bool IN array_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_call ::= ID LPAREN param_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // param_list ::= bool COMMA param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // param_list ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bool ::= bool OR join 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bool ::= join 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bool ::= in_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // join ::= join AND equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("join",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // join ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("join",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // equality ::= equality EQ rel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // equality ::= equality NEQ rel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // equality ::= rel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // rel ::= expr LT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // rel ::= expr LTE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // rel ::= expr GTE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // rel ::= expr GT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rel ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr PLUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr MINUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // term ::= term TIMES unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term ::= term DIVIDE unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term ::= unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unary ::= NOT unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unary ::= MINUS unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unary ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= LPAREN bool RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= loc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // numerical_val ::= INTEGER_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_val",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // numerical_val ::= FLOAT_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_val",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // numerical_val ::= RATIONAL_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_val",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
