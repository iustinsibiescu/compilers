
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\015" +
    "\000\002\003\012\000\002\004\005\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\006\002\000\002" +
    "\007\006\000\002\010\004\000\002\010\003\000\002\011" +
    "\011\000\002\012\013\000\002\012\011\000\002\013\011" +
    "\000\002\014\004\000\002\014\003\000\002\015\004\000" +
    "\002\015\003\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\021\005\000\002\020\004\000\002\022\007\000\002\022" +
    "\005\000\002\023\005\000\002\024\007\000\002\024\005" +
    "\000\002\024\002\000\002\025\007\000\002\025\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\003\000\002\027\007\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\027\002\000\002\030\010" +
    "\000\002\030\007\000\002\030\007\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\004\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\006\000\002\036\005\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\006" +
    "\000\002\041\005\000\002\041\003\000\002\042\005\000" +
    "\002\042\003\000\002\042\003\000\002\043\005\000\002" +
    "\043\003\000\002\044\005\000\002\044\005\000\002\044" +
    "\003\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\003\000\002\046\005\000" +
    "\002\046\005\000\002\046\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\003\000\002\050\004\000\002\050" +
    "\004\000\002\050\003\000\002\051\005\000\002\051\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\010\004\012\060\005\070\010\001\002\000" +
    "\004\042\335\001\002\000\004\063\332\001\002\000\010" +
    "\002\ufffd\004\012\070\010\001\002\000\004\002\330\001" +
    "\002\000\004\004\222\001\002\000\006\042\216\044\220" +
    "\001\002\000\004\043\026\001\002\000\004\042\025\001" +
    "\002\000\004\042\024\001\002\000\010\004\012\060\005" +
    "\070\010\001\002\000\004\042\020\001\002\000\026\002" +
    "\uffed\004\uffed\045\uffed\051\uffed\054\uffed\056\uffed\057\uffed" +
    "\060\uffed\067\uffed\070\uffed\001\002\000\026\002\uffdf\004" +
    "\uffdf\045\uffdf\051\uffdf\054\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\067\uffdf\070\uffdf\001\002\000\010\002\uffff\004\012\070" +
    "\010\001\002\000\026\002\uffee\004\uffee\045\uffee\051\uffee" +
    "\054\uffee\056\uffee\057\uffee\060\uffee\067\uffee\070\uffee\001" +
    "\002\000\010\002\001\004\012\070\010\001\002\000\026" +
    "\002\uffde\004\uffde\045\uffde\051\uffde\054\uffde\056\uffde\057" +
    "\uffde\060\uffde\067\uffde\070\uffde\001\002\000\026\002\uffdc" +
    "\004\uffdc\045\uffdc\051\uffdc\054\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\067\uffdc\070\uffdc\001\002\000\020\005\036\006\030" +
    "\007\033\010\031\011\035\012\034\013\027\001\002\000" +
    "\006\042\uffd2\044\212\001\002\000\012\024\uffbd\042\uffbd" +
    "\044\uffbd\065\uffbd\001\002\000\012\024\uffbf\042\uffbf\044" +
    "\uffbf\065\uffbf\001\002\000\012\024\uffdb\042\uffdb\044\uffdb" +
    "\065\uffdb\001\002\000\012\024\uffc1\042\uffc1\044\uffc1\065" +
    "\uffc1\001\002\000\006\042\uffd8\044\037\001\002\000\012" +
    "\024\uffc0\042\uffc0\044\uffc0\065\uffc0\001\002\000\012\024" +
    "\uffbe\042\uffbe\044\uffbe\065\uffbe\001\002\000\004\063\040" +
    "\001\002\000\024\004\052\014\053\015\054\016\044\017" +
    "\043\020\051\021\056\022\050\064\uffd4\001\002\000\004" +
    "\042\uffd9\001\002\000\050\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\042\uffbb\043\uffbb\055\uffbb\062" +
    "\uffbb\064\uffbb\065\uffbb\001\002\000\050\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\042\uff92\043\uff92" +
    "\055\uff92\062\uff92\064\uff92\065\uff92\001\002\000\050\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042" +
    "\uff93\043\uff93\055\uff93\062\uff93\064\uff93\065\uff93\001\002" +
    "\000\050\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\042\uffb5\043\uffb5\055\uffb5\062\uffb5\064\uffb5\065" +
    "\uffb5\001\002\000\050\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\055\uffb6\062\uffb6" +
    "\064\uffb6\065\uffb6\001\002\000\004\043\206\001\002\000" +
    "\050\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\042\uff91\043\uff91\055\uff91\062\uff91\064\uff91\065\uff91" +
    "\001\002\000\050\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\042\uffb8\043\uffb8\055\uffb8\062\uffb8\064" +
    "\uffb8\065\uffb8\001\002\000\054\023\060\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc" +
    "\055\uffbc\061\061\062\uffbc\064\uffbc\065\uffbc\001\002\000" +
    "\050\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\042\uffba\043\uffba\055\uffba\062\uffba\064\uffba\065\uffba" +
    "\001\002\000\050\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\042\uffb9\043\uffb9\055\uffb9\062\uffb9\064" +
    "\uffb9\065\uffb9\001\002\000\004\064\057\001\002\000\050" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\042\uffb7\043\uffb7\055\uffb7\062\uffb7\064\uffb7\065\uffb7\001" +
    "\002\000\016\024\uffd7\040\uffd7\042\uffd7\055\uffd7\062\uffd7" +
    "\065\uffd7\001\002\000\030\004\052\014\053\015\054\016" +
    "\044\017\043\020\051\021\056\022\050\023\067\026\077" +
    "\041\066\001\002\000\022\004\052\014\053\015\054\016" +
    "\044\017\043\020\051\021\056\022\050\001\002\000\004" +
    "\062\063\001\002\000\050\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\042\uffb4\043\uffb4\055\uffb4\062" +
    "\uffb4\064\uffb4\065\uffb4\001\002\000\040\024\uff9f\025\176" +
    "\026\177\031\174\032\172\033\173\034\175\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\042\uff9f\055\uff9f\062\uff9f\065\uff9f" +
    "\001\002\000\024\024\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\042\uffa4\055\uffa4\062\uffa4\065\uffa4\001\002\000\030" +
    "\004\052\014\053\015\054\016\044\017\043\020\051\021" +
    "\056\022\050\023\067\026\077\041\066\001\002\000\030" +
    "\004\052\014\053\015\054\016\044\017\043\020\051\021" +
    "\056\022\050\023\067\026\077\041\066\001\002\000\044" +
    "\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94" +
    "\042\uff94\055\uff94\062\uff94\065\uff94\001\002\000\024\024" +
    "\uffa7\035\112\036\113\037\uffa7\040\uffa7\042\uffa7\055\uffa7" +
    "\062\uffa7\065\uffa7\001\002\000\044\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\042\uff99\055\uff99\062" +
    "\uff99\065\uff99\001\002\000\012\024\uffac\040\120\055\117" +
    "\065\116\001\002\000\044\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\040\uff96\042\uff96\055\uff96\062\uff96\065" +
    "\uff96\001\002\000\020\024\uffaa\037\110\040\uffaa\042\uffaa" +
    "\055\uffaa\062\uffaa\065\uffaa\001\002\000\044\024\uff9c\025" +
    "\uff9c\026\uff9c\027\105\030\104\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\042\uff9c\055" +
    "\uff9c\062\uff9c\065\uff9c\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\016\024\uffa9\040\uffa9" +
    "\042\uffa9\055\uffa9\062\uffa9\065\uffa9\001\002\000\004\024" +
    "\102\001\002\000\050\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\042\uffae\043\uffae\055\uffae\062\uffae" +
    "\064\uffae\065\uffae\001\002\000\044\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\042\uff97\055\uff97\062" +
    "\uff97\065\uff97\001\002\000\030\004\052\014\053\015\054" +
    "\016\044\017\043\020\051\021\056\022\050\023\067\026" +
    "\077\041\066\001\002\000\030\004\052\014\053\015\054" +
    "\016\044\017\043\020\051\021\056\022\050\023\067\026" +
    "\077\041\066\001\002\000\044\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\042\uff9b\055\uff9b\062\uff9b" +
    "\065\uff9b\001\002\000\044\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\042\uff9a\055\uff9a\062\uff9a\065" +
    "\uff9a\001\002\000\030\004\052\014\053\015\054\016\044" +
    "\017\043\020\051\021\056\022\050\023\067\026\077\041" +
    "\066\001\002\000\024\024\uffa8\035\112\036\113\037\uffa8" +
    "\040\uffa8\042\uffa8\055\uffa8\062\uffa8\065\uffa8\001\002\000" +
    "\030\004\052\014\053\015\054\016\044\017\043\020\051" +
    "\021\056\022\050\023\067\026\077\041\066\001\002\000" +
    "\030\004\052\014\053\015\054\016\044\017\043\020\051" +
    "\021\056\022\050\023\067\026\077\041\066\001\002\000" +
    "\024\024\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5" +
    "\055\uffa5\062\uffa5\065\uffa5\001\002\000\024\024\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\042\uffa6\055\uffa6\062\uffa6" +
    "\065\uffa6\001\002\000\030\004\052\014\053\015\054\016" +
    "\044\017\043\020\051\021\056\022\050\023\067\026\077" +
    "\041\066\001\002\000\010\004\122\061\130\063\040\001" +
    "\002\000\030\004\052\014\053\015\054\016\044\017\043" +
    "\020\051\021\056\022\050\023\067\026\077\041\066\001" +
    "\002\000\020\024\uffab\037\110\040\uffab\042\uffab\055\uffab" +
    "\062\uffab\065\uffab\001\002\000\020\024\uffaf\040\uffaf\042" +
    "\uffaf\055\uffaf\061\143\062\uffaf\065\uffaf\001\002\000\016" +
    "\024\uffb0\040\uffb0\042\uffb0\055\uffb0\062\uffb0\065\uffb0\001" +
    "\002\000\016\024\uffb2\040\uffb2\042\uffb2\055\uffb2\062\uffb2" +
    "\065\uffb2\001\002\000\016\024\uffd0\040\uffd0\042\uffd0\055" +
    "\uffd0\062\uffd0\065\uffd0\001\002\000\016\024\uffb3\040\uffb3" +
    "\042\uffb3\055\uffb3\062\uffb3\065\uffb3\001\002\000\016\024" +
    "\uffb1\040\uffb1\042\uffb1\055\uffb1\062\uffb1\065\uffb1\001\002" +
    "\000\034\004\132\014\053\015\054\016\044\017\043\020" +
    "\051\021\056\022\050\023\067\026\077\041\066\061\131" +
    "\062\uffc9\001\002\000\034\004\132\014\053\015\054\016" +
    "\044\017\043\020\051\021\056\022\050\023\067\026\077" +
    "\041\066\061\131\062\uffc9\001\002\000\044\023\060\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\055\uffbc\061" +
    "\143\062\uffbc\065\uffbc\001\002\000\012\040\120\055\117" +
    "\062\uffce\065\141\001\002\000\004\062\140\001\002\000" +
    "\006\062\uffca\065\136\001\002\000\034\004\132\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\061\131\062\uffc9\001\002\000\004" +
    "\062\uffcb\001\002\000\016\024\uffd1\040\uffd1\042\uffd1\055" +
    "\uffd1\062\uffd1\065\uffd1\001\002\000\034\004\132\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\061\131\062\uffc9\001\002\000\004" +
    "\062\uffcf\001\002\000\024\004\147\014\053\015\054\016" +
    "\145\017\043\020\051\021\056\022\050\043\144\001\002" +
    "\000\006\004\152\016\155\001\002\000\006\043\uffc4\062" +
    "\uff93\001\002\000\006\043\uffc3\062\uffb6\001\002\000\012" +
    "\023\060\043\uffc5\061\061\062\uffbc\001\002\000\004\043" +
    "\151\001\002\000\010\004\152\016\155\062\153\001\002" +
    "\000\010\023\060\043\uffc5\062\uffc5\001\002\000\016\024" +
    "\uffc6\040\uffc6\042\uffc6\055\uffc6\062\uffc6\065\uffc6\001\002" +
    "\000\004\062\157\001\002\000\006\043\uffc4\062\uffc4\001" +
    "\002\000\006\043\uffc3\062\uffc3\001\002\000\016\024\uffc8" +
    "\040\uffc8\042\uffc8\055\uffc8\062\uffc8\065\uffc8\001\002\000" +
    "\004\062\161\001\002\000\016\024\uffc7\040\uffc7\042\uffc7" +
    "\055\uffc7\062\uffc7\065\uffc7\001\002\000\004\062\163\001" +
    "\002\000\006\062\uffcc\065\164\001\002\000\034\004\132" +
    "\014\053\015\054\016\044\017\043\020\051\021\056\022" +
    "\050\023\067\026\077\041\066\061\131\062\uffc9\001\002" +
    "\000\004\062\uffcd\001\002\000\004\024\uffad\001\002\000" +
    "\010\024\170\040\120\055\117\001\002\000\044\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\042\uff95" +
    "\055\uff95\062\uff95\065\uff95\001\002\000\044\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\042\uff98\055" +
    "\uff98\062\uff98\065\uff98\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\030\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\023" +
    "\067\026\077\041\066\001\002\000\044\024\uff9d\025\uff9d" +
    "\026\uff9d\027\105\030\104\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\042\uff9d\055\uff9d" +
    "\062\uff9d\065\uff9d\001\002\000\044\024\uff9e\025\uff9e\026" +
    "\uff9e\027\105\030\104\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\042\uff9e\055\uff9e\062" +
    "\uff9e\065\uff9e\001\002\000\030\024\uffa2\025\176\026\177" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042\uffa2\055\uffa2\062" +
    "\uffa2\065\uffa2\001\002\000\030\024\uffa0\025\176\026\177" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\042\uffa0\055\uffa0\062" +
    "\uffa0\065\uffa0\001\002\000\030\024\uffa3\025\176\026\177" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\042\uffa3\055\uffa3\062" +
    "\uffa3\065\uffa3\001\002\000\030\024\uffa1\025\176\026\177" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\042\uffa1\055\uffa1\062" +
    "\uffa1\065\uffa1\001\002\000\022\004\052\014\053\015\054" +
    "\016\044\017\043\020\051\021\056\022\050\001\002\000" +
    "\006\064\uffd5\065\210\001\002\000\024\004\052\014\053" +
    "\015\054\016\044\017\043\020\051\021\056\022\050\064" +
    "\uffd4\001\002\000\004\064\uffd6\001\002\000\006\004\213" +
    "\061\130\001\002\000\004\061\215\001\002\000\004\042" +
    "\uffd3\001\002\000\010\004\152\016\155\043\144\001\002" +
    "\000\026\002\uffe0\004\uffe0\045\uffe0\051\uffe0\054\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\067\uffe0\070\uffe0\001\002\000\004" +
    "\042\uffda\001\002\000\030\004\052\014\053\015\054\016" +
    "\044\017\043\020\051\021\056\022\050\023\067\026\077" +
    "\041\066\001\002\000\010\040\120\042\uffc2\055\117\001" +
    "\002\000\004\023\223\001\002\000\006\004\224\024\ufff6" +
    "\001\002\000\004\043\327\001\002\000\004\024\231\001" +
    "\002\000\006\024\ufff7\065\227\001\002\000\006\004\224" +
    "\024\ufff6\001\002\000\004\024\ufff8\001\002\000\004\063" +
    "\232\001\002\000\022\004\243\045\241\051\237\054\235" +
    "\056\234\057\247\067\251\070\010\001\002\000\032\004" +
    "\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5" +
    "\056\uffe5\057\uffe5\064\uffe5\066\uffe5\067\uffe5\001\002\000" +
    "\004\004\323\001\002\000\004\023\314\001\002\000\032" +
    "\004\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6\053\uffe6\054" +
    "\uffe6\056\uffe6\057\uffe6\064\uffe6\066\uffe6\067\uffe6\001\002" +
    "\000\004\023\306\001\002\000\004\042\305\001\002\000" +
    "\004\023\274\001\002\000\022\004\243\045\241\051\237" +
    "\054\235\056\234\057\247\067\251\070\010\001\002\000" +
    "\012\023\060\043\026\044\220\061\061\001\002\000\006" +
    "\064\264\066\262\001\002\000\004\042\261\001\002\000" +
    "\032\004\256\045\241\046\ufff3\050\ufff3\051\237\053\ufff3" +
    "\054\235\056\234\057\247\064\ufff3\066\ufff3\067\251\001" +
    "\002\000\030\004\052\014\053\015\054\016\044\017\043" +
    "\020\051\021\056\022\050\023\067\026\077\041\066\001" +
    "\002\000\032\004\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7" +
    "\053\uffe7\054\uffe7\056\uffe7\057\uffe7\064\uffe7\066\uffe7\067" +
    "\uffe7\001\002\000\032\004\uffe4\045\uffe4\046\uffe4\050\uffe4" +
    "\051\uffe4\053\uffe4\054\uffe4\056\uffe4\057\uffe4\064\uffe4\066" +
    "\uffe4\067\uffe4\001\002\000\032\004\uffeb\045\uffeb\046\uffeb" +
    "\050\uffeb\051\uffeb\053\uffeb\054\uffeb\056\uffeb\057\uffeb\064" +
    "\uffeb\066\uffeb\067\uffeb\001\002\000\010\040\120\042\254" +
    "\055\117\001\002\000\032\004\uffe1\045\uffe1\046\uffe1\050" +
    "\uffe1\051\uffe1\053\uffe1\054\uffe1\056\uffe1\057\uffe1\064\uffe1" +
    "\066\uffe1\067\uffe1\001\002\000\032\004\uffec\045\uffec\046" +
    "\uffec\050\uffec\051\uffec\053\uffec\054\uffec\056\uffec\057\uffec" +
    "\064\uffec\066\uffec\067\uffec\001\002\000\010\023\060\044" +
    "\220\061\061\001\002\000\004\042\260\001\002\000\032" +
    "\004\uffea\045\uffea\046\uffea\050\uffea\051\uffea\053\uffea\054" +
    "\uffea\056\uffea\057\uffea\064\uffea\066\uffea\067\uffea\001\002" +
    "\000\032\004\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\053" +
    "\uffe8\054\uffe8\056\uffe8\057\uffe8\064\uffe8\066\uffe8\067\uffe8" +
    "\001\002\000\030\004\052\014\053\015\054\016\044\017" +
    "\043\020\051\021\056\022\050\023\067\026\077\041\066" +
    "\001\002\000\004\064\265\001\002\000\004\042\ufffb\001" +
    "\002\000\004\043\266\001\002\000\014\005\036\006\030" +
    "\007\033\010\031\011\035\001\002\000\004\042\ufffc\001" +
    "\002\000\010\040\120\042\ufff9\055\117\001\002\000\004" +
    "\042\272\001\002\000\004\064\ufffa\001\002\000\032\004" +
    "\256\045\241\046\ufff4\050\ufff4\051\237\053\ufff4\054\235" +
    "\056\234\057\247\064\ufff4\066\ufff4\067\251\001\002\000" +
    "\030\004\052\014\053\015\054\016\044\017\043\020\051" +
    "\021\056\022\050\023\067\026\077\041\066\001\002\000" +
    "\010\024\276\040\120\055\117\001\002\000\004\047\277" +
    "\001\002\000\022\004\243\045\241\051\237\054\235\056" +
    "\234\057\247\067\251\070\010\001\002\000\006\046\301" +
    "\050\302\001\002\000\032\004\ufff0\045\ufff0\046\ufff0\050" +
    "\ufff0\051\ufff0\053\ufff0\054\ufff0\056\ufff0\057\ufff0\064\ufff0" +
    "\066\ufff0\067\ufff0\001\002\000\022\004\243\045\241\051" +
    "\237\054\235\056\234\057\247\067\251\070\010\001\002" +
    "\000\004\046\304\001\002\000\032\004\ufff1\045\ufff1\046" +
    "\ufff1\050\ufff1\051\ufff1\053\ufff1\054\ufff1\056\ufff1\057\ufff1" +
    "\064\ufff1\066\ufff1\067\ufff1\001\002\000\032\004\uffe9\045" +
    "\uffe9\046\uffe9\050\uffe9\051\uffe9\053\uffe9\054\uffe9\056\uffe9" +
    "\057\uffe9\064\uffe9\066\uffe9\067\uffe9\001\002\000\030\004" +
    "\052\014\053\015\054\016\044\017\043\020\051\021\056" +
    "\022\050\023\067\026\077\041\066\001\002\000\010\024" +
    "\310\040\120\055\117\001\002\000\004\052\311\001\002" +
    "\000\022\004\243\045\241\051\237\054\235\056\234\057" +
    "\247\067\251\070\010\001\002\000\004\053\313\001\002" +
    "\000\032\004\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\053" +
    "\ufff2\054\ufff2\056\ufff2\057\ufff2\064\ufff2\066\ufff2\067\ufff2" +
    "\001\002\000\030\004\052\014\053\015\054\016\044\017" +
    "\043\020\051\021\056\022\050\023\067\026\077\041\066" +
    "\001\002\000\006\040\120\055\117\001\002\000\010\024" +
    "\317\040\uffa9\055\uffa9\001\002\000\004\052\320\001\002" +
    "\000\022\004\243\045\241\051\237\054\235\056\234\057" +
    "\247\067\251\070\010\001\002\000\004\053\322\001\002" +
    "\000\032\004\uffef\045\uffef\046\uffef\050\uffef\051\uffef\053" +
    "\uffef\054\uffef\056\uffef\057\uffef\064\uffef\066\uffef\067\uffef" +
    "\001\002\000\006\042\326\061\061\001\002\000\004\042" +
    "\325\001\002\000\032\004\uffe2\045\uffe2\046\uffe2\050\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\056\uffe2\057\uffe2\064\uffe2\066" +
    "\uffe2\067\uffe2\001\002\000\032\004\uffe3\045\uffe3\046\uffe3" +
    "\050\uffe3\051\uffe3\053\uffe3\054\uffe3\056\uffe3\057\uffe3\064" +
    "\uffe3\066\uffe3\067\uffe3\001\002\000\014\005\036\006\030" +
    "\007\033\010\031\011\035\001\002\000\004\002\000\001" +
    "\002\000\010\002\ufffe\004\012\070\010\001\002\000\022" +
    "\004\243\045\241\051\237\054\235\056\234\057\247\067" +
    "\251\070\010\001\002\000\004\064\334\001\002\000\010" +
    "\002\ufff5\004\ufff5\070\ufff5\001\002\000\026\002\uffdd\004" +
    "\uffdd\045\uffdd\051\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\067\uffdd\070\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\024\002\006\003\012\007\005\014\014\017" +
    "\016\020\015\021\010\022\013\025\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\012\014\330\017" +
    "\016\020\015\021\010\022\013\025\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\012\007\020\017\021\020\015\021\010\022\013\025" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\012\014\022\017\016\020\015\021" +
    "\010\022\013\025\003\001\001\000\002\001\001\000\016" +
    "\003\012\017\021\020\015\021\010\022\013\025\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\040\001" +
    "\001\000\014\024\054\034\046\035\044\040\045\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\034" +
    "\067\035\044\036\077\040\045\041\100\042\072\043\074" +
    "\044\070\045\064\046\063\047\075\050\071\051\073\052" +
    "\041\001\001\000\012\034\061\035\044\040\045\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\034\067\035\044\040\045" +
    "\050\170\051\073\052\041\001\001\000\034\034\067\035" +
    "\044\036\077\040\045\042\166\043\074\044\070\045\064" +
    "\046\063\047\075\050\071\051\073\052\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\034\067\035\044\040\045\050\102\051\073" +
    "\052\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\034\067\035\044" +
    "\040\045\050\106\051\073\052\041\001\001\000\016\034" +
    "\067\035\044\040\045\050\105\051\073\052\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\034\067\035" +
    "\044\040\045\044\110\045\064\046\063\047\075\050\071" +
    "\051\073\052\041\001\001\000\002\001\001\000\024\034" +
    "\067\035\044\040\045\045\114\046\063\047\075\050\071" +
    "\051\073\052\041\001\001\000\024\034\067\035\044\040" +
    "\045\045\113\046\063\047\075\050\071\051\073\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\034" +
    "\067\035\044\036\077\040\045\041\165\042\072\043\074" +
    "\044\070\045\064\046\063\047\075\050\071\051\073\052" +
    "\041\001\001\000\014\023\123\026\126\030\124\035\122" +
    "\037\125\001\001\000\030\034\067\035\044\040\045\043" +
    "\120\044\070\045\064\046\063\047\075\050\071\051\073" +
    "\052\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\027\133\030\134\034" +
    "\067\035\044\036\077\040\045\042\132\043\074\044\070" +
    "\045\064\046\063\047\075\050\071\051\073\052\041\001" +
    "\001\000\040\027\161\030\134\034\067\035\044\036\077" +
    "\040\045\042\132\043\074\044\070\045\064\046\063\047" +
    "\075\050\071\051\073\052\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\027\136\030\134\034\067\035\044\036\077\040\045" +
    "\042\132\043\074\044\070\045\064\046\063\047\075\050" +
    "\071\051\073\052\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\027\141\030\134\034\067\035\044\036" +
    "\077\040\045\042\132\043\074\044\070\045\064\046\063" +
    "\047\075\050\071\051\073\052\041\001\001\000\002\001" +
    "\001\000\014\031\147\034\061\035\044\040\145\052\041" +
    "\001\001\000\006\031\157\040\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\153\040\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\027\164" +
    "\030\134\034\067\035\044\036\077\040\045\042\132\043" +
    "\074\044\070\045\064\046\063\047\075\050\071\051\073" +
    "\052\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\034\067\035\044\040\045\046\204\047\075\050\071\051" +
    "\073\052\041\001\001\000\022\034\067\035\044\040\045" +
    "\046\203\047\075\050\071\051\073\052\041\001\001\000" +
    "\022\034\067\035\044\040\045\046\202\047\075\050\071" +
    "\051\073\052\041\001\001\000\022\034\067\035\044\040" +
    "\045\046\201\047\075\050\071\051\073\052\041\001\001" +
    "\000\020\034\067\035\044\040\045\047\200\050\071\051" +
    "\073\052\041\001\001\000\020\034\067\035\044\040\045" +
    "\047\177\050\071\051\073\052\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\034\206\035" +
    "\044\040\045\052\041\001\001\000\002\001\001\000\014" +
    "\024\210\034\046\035\044\040\045\052\041\001\001\000" +
    "\002\001\001\000\006\026\213\030\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\147\040\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\034\067" +
    "\035\044\036\077\040\045\042\220\043\074\044\070\045" +
    "\064\046\063\047\075\050\071\051\073\052\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\224\021" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\227\021\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\012\010\243\011\235" +
    "\012\247\013\232\014\241\015\245\016\251\017\016\020" +
    "\015\021\010\022\013\025\003\035\244\040\237\001\001" +
    "\000\002\001\001\000\004\035\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\012\011\235\012\247\013" +
    "\232\015\272\016\251\017\021\020\015\021\010\022\013" +
    "\025\003\035\244\040\237\001\001\000\004\032\256\001" +
    "\001\000\004\004\262\001\001\000\002\001\001\000\016" +
    "\011\235\012\247\013\232\016\254\035\244\040\237\001" +
    "\001\000\034\034\067\035\044\036\077\040\045\042\252" +
    "\043\074\044\070\045\064\046\063\047\075\050\071\051" +
    "\073\052\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\270\034" +
    "\067\035\044\036\077\040\045\042\267\043\074\044\070" +
    "\045\064\046\063\047\075\050\071\051\073\052\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\235" +
    "\012\247\013\232\016\254\035\244\040\237\001\001\000" +
    "\034\034\067\035\044\036\077\040\045\042\274\043\074" +
    "\044\070\045\064\046\063\047\075\050\071\051\073\052" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\012\010\277\011\235\012\247\013\232\014\241\015" +
    "\245\016\251\017\016\020\015\021\010\022\013\025\003" +
    "\035\244\040\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\012\010\302\011\235\012\247\013\232" +
    "\014\241\015\245\016\251\017\016\020\015\021\010\022" +
    "\013\025\003\035\244\040\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\034\067\035" +
    "\044\036\077\040\045\042\306\043\074\044\070\045\064" +
    "\046\063\047\075\050\071\051\073\052\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\012\010\311" +
    "\011\235\012\247\013\232\014\241\015\245\016\251\017" +
    "\016\020\015\021\010\022\013\025\003\035\244\040\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\034" +
    "\067\035\044\036\315\040\045\042\314\043\074\044\070" +
    "\045\064\046\063\047\075\050\071\051\073\052\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\012\010\320\011\235\012\247\013\232\014" +
    "\241\015\245\016\251\017\016\020\015\021\010\022\013" +
    "\025\003\035\244\040\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\031\001\001\000" +
    "\002\001\001\000\016\003\012\017\021\020\015\021\010" +
    "\022\013\025\003\001\001\000\040\003\012\010\332\011" +
    "\235\012\247\013\232\014\241\015\245\016\251\017\016" +
    "\020\015\021\010\022\013\025\003\035\244\040\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
	boolean syntaxErrors;

	public void syntax_error(Symbol current_token) {
	syntaxErrors = true;
	report_error(
		"Syntax error at line " + (current_token.left+1) + ", column "
		+ current_token.right + current_token.toString() +"\n\n\n\n\n", null
	);
	}
	public void report_fatal_error(String message, Object info) {
		report_error("", null);
		done_parsing();
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declrs main declrs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declrs main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= main declrs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declr ::= FDEF ID LPAREN formal_param_list RPAREN LCURL body return RCURL COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declr ::= FDEF ID LPAREN formal_param_list RPAREN LCURL body RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN return_val SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return_val ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_val",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal_param_list ::= normal_declr COMMA formal_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_param_list ::= normal_declr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_param_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main ::= MAIN LCURL body RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= declrs stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // while_block ::= WHILE LPAREN bool RPAREN DO body OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_block",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if_block ::= IF LPAREN bool RPAREN THEN body ELSE body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_block ::= IF LPAREN bool RPAREN THEN body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // forall_block ::= FORALL LPAREN in_block RPAREN DO body OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forall_block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declrs ::= declrs declr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declrs ::= declr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmts ::= stmts stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= ID assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= array_element SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= if_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= while_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= forall_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= MAIN_RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= READ ID SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= READ array_element SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= PRINT bool SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declr ::= normal_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declr ::= init_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declr ::= dict_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declr ::= seq_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declr ::= function_declr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // normal_declr ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normal_declr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // init_declr ::= normal_declr assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dict_declr ::= ID COLON DICT_TYPE ASSIGN dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_declr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dict_declr ::= ID COLON DICT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_declr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dict_value ::= LCURL dict_body RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dict_body ::= loc COLON loc COMMA dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dict_body ::= loc COLON loc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dict_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // seq_declr ::= ID COLON SEQ_TYPE ASSIGN seq_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_declr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seq_declr ::= ID COLON SEQ_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_declr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seq_value ::= LBRACKET seq_elements RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_value",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // seq_value ::= slicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_value",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // seq_elements ::= bool COMMA seq_elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // seq_elements ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // seq_elements ::= LBRACKET seq_elements RBRACKET COMMA seq_elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // seq_elements ::= LBRACKET seq_elements RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // seq_elements ::= slicing COMMA seq_elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // seq_elements ::= slicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // seq_elements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_elements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // slicing ::= ID LBRACKET slicing_index COLON slicing_index RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // slicing ::= ID LBRACKET COLON slicing_index RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // slicing ::= ID LBRACKET slicing_index COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // slicing_index ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing_index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // slicing_index ::= INTEGER_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing_index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // slicing_index ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slicing_index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignment ::= ASSIGN bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= INTEGER_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= FLOAT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= RATIONAL_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= BOOLEAN_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= CHARACTER_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // loc ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // loc ::= numerical_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // loc ::= BOOLEAN_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loc ::= CHARACTER_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // loc ::= DICT_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // loc ::= SEQ_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // loc ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // loc ::= array_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // array_element ::= ID LBRACKET loc RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_element",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // in_block ::= bool IN iterable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_block",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iterable ::= dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // iterable ::= seq_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // iterable ::= array_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // iterable ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_call ::= ID LPAREN param_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // param_list ::= bool COMMA param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // param_list ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bool ::= bool OR join 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bool ::= join 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bool ::= in_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // join ::= join AND equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("join",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // join ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("join",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // equality ::= equality EQ rel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // equality ::= equality NEQ rel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // equality ::= rel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rel ::= expr LT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rel ::= expr LTE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rel ::= expr GTE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rel ::= expr GT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // rel ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr PLUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr MINUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term ::= term TIMES unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // term ::= term DIVIDE unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unary ::= NOT unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unary ::= MINUS unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unary ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= LPAREN bool RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= loc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // numerical_val ::= INTEGER_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_val",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // numerical_val ::= FLOAT_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_val",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // numerical_val ::= RATIONAL_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_val",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
