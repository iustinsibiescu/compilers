import java_cup.runtime.*;
   

parser code {:
    
    boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
		syntaxErrors = true;
    report_error(
			"Syntax error at line " + (current_token.left+1) + ", column "
			+ current_token.right + current_token.toString() +"\n\n\n\n\n", null
	);
	}
   
    public void report_error(String message, Object info) {
   

        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
   
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
    
            if (s.left >= 0) {                
                
                m.append(" in line "+(s.left+1));   
            
                if (s.right >= 0)                    

                    m.append(", column "+(s.right+1));
            }
        }
   

        m.append(" : "+message);

        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal Integer   NUMBER, ID;


non terminal Object     expr_list, expr_part;
non terminal Integer    expr, factor, term;
   
   
   expr_list ::= expr_list expr_part
                 |
                 expr_part;
   
   
   expr_part ::= expr:e
                 {: System.out.println(" = " + e); :}
                 SEMI
                 ;
   
   
   expr      ::= expr:e PLUS factor:f
                 {: RESULT = new Integer(e.intValue() + f.intValue()); :}
                 |
                 expr:e MINUS factor:f
                 {: RESULT = new Integer(e.intValue() - f.intValue()); :}
                 |
                 factor:f
                 {: RESULT = new Integer(f.intValue()); :}
                 ;
   
   
   factor    ::= factor:f TIMES term:t
                 {: RESULT = new Integer(f.intValue() * t.intValue()); :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = new Integer(f.intValue() / t.intValue()); :}
                 |
                 term:t
                 {: RESULT = new Integer(t.intValue()); :}
                 ;
   
   
   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = n; :}
                 |
                 ID:i
                 {: RESULT = i; :}
                 ;
