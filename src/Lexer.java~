/* The following code was generated by JFlex 1.6.0 */

import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/Lexer.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\33\1\34\1\1\22\0\1\3\1\52\1\10"+
    "\1\32\2\10\1\54\1\5\1\61\1\62\1\60\1\56\1\22\1\57"+
    "\1\14\1\13\1\11\11\7\1\26\1\42\1\21\1\53\1\23\2\10"+
    "\5\6\1\4\15\6\1\4\6\6\1\63\1\10\1\64\1\10\1\12"+
    "\1\10\1\36\1\50\1\17\1\15\1\30\1\47\1\6\1\44\1\16"+
    "\2\6\1\45\1\35\1\37\1\46\1\51\1\31\1\40\1\27\1\20"+
    "\1\41\1\6\1\43\3\6\1\24\1\55\1\25\1\10\6\0\1\33"+
    "\u1fa2\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\2\5\1\6"+
    "\4\4\1\7\1\10\1\11\1\12\1\13\1\14\2\4"+
    "\1\1\2\4\1\15\5\4\1\16\1\17\2\1\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\4\0\1\4"+
    "\1\27\1\30\1\31\2\4\1\32\1\33\4\0\1\34"+
    "\1\35\2\4\1\0\4\4\1\36\1\4\1\37\4\4"+
    "\1\40\1\41\1\42\1\43\2\0\1\44\1\0\1\4"+
    "\1\45\2\4\4\0\5\4\1\46\6\4\1\0\1\2"+
    "\1\4\1\47\1\50\11\0\1\51\1\52\1\4\1\53"+
    "\1\4\1\54\2\4\1\55\1\4\2\56\7\0\1\4"+
    "\1\57\1\60\1\4\1\61\5\0\1\62\1\63\1\64"+
    "\2\0\1\65\1\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\324\0\237\0\u0109"+
    "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65"+
    "\0\u02b1\0\u02e6\0\65\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\65\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\65\0\u0597\0\u05cc\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\237"+
    "\0\u070a\0\237\0\u073f\0\u0774\0\65\0\65\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\65\0\65\0\u087d\0\u08b2\0\u03ba\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\237\0\u09bb\0\237\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\65\0\65\0\65\0\65\0\u0ac4\0\u0af9"+
    "\0\u066b\0\u0b2e\0\u0b63\0\237\0\u0b98\0\u0bcd\0\u0c02\0\u0c37"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\237"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u06a0"+
    "\0\u0f52\0\237\0\237\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\237\0\237\0\u1164\0\237"+
    "\0\u1199\0\237\0\u11ce\0\u1203\0\237\0\u1238\0\u126d\0\65"+
    "\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415"+
    "\0\237\0\237\0\u144a\0\237\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\65\0\u1588\0\237\0\u15bd\0\u15f2\0\65\0\u1627"+
    "\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\7\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\7\1\27\1\2\1\4\1\30\2\7\1\31\1\7"+
    "\1\32\1\33\2\7\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\67\0\1\4\66\0\1\7\1\0\2\7"+
    "\1\0\2\7\2\0\4\7\6\0\3\7\3\0\5\7"+
    "\1\0\7\7\17\0\27\53\2\0\30\53\7\0\1\10"+
    "\1\0\1\10\1\54\1\0\1\55\62\0\1\54\1\0"+
    "\1\55\102\0\1\56\36\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\7\1\57\2\7\6\0\3\7\3\0"+
    "\5\7\1\0\3\7\1\60\3\7\17\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\4\7\6\0\3\7\3\0"+
    "\2\7\1\61\2\7\1\0\4\7\1\62\2\7\17\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\4\7\6\0"+
    "\3\7\3\0\5\7\1\0\1\7\1\63\5\7\17\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\4\7\6\0"+
    "\3\7\3\0\5\7\1\0\1\7\1\64\5\7\66\0"+
    "\1\65\64\0\1\66\15\0\1\67\1\70\1\67\1\71"+
    "\1\0\1\72\1\67\2\0\4\67\4\0\1\73\1\0"+
    "\3\67\3\0\5\67\1\0\7\67\66\0\1\74\15\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\4\7\6\0"+
    "\1\7\1\75\1\7\3\0\5\7\1\0\7\7\17\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\4\7\6\0"+
    "\3\7\3\0\5\7\1\0\2\7\1\76\4\7\13\0"+
    "\1\77\1\0\1\4\30\77\2\0\30\77\4\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\3\7"+
    "\3\0\1\7\1\100\3\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\1\7"+
    "\1\101\1\7\3\0\1\7\1\102\3\7\1\0\7\7"+
    "\17\0\1\7\1\0\2\7\1\0\2\7\2\0\4\7"+
    "\6\0\3\7\3\0\5\7\1\0\1\7\1\103\5\7"+
    "\17\0\1\7\1\0\2\7\1\0\2\7\2\0\1\104"+
    "\3\7\6\0\3\7\3\0\5\7\1\0\7\7\17\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\1\105\1\106"+
    "\2\7\6\0\3\7\3\0\5\7\1\0\2\7\1\107"+
    "\1\110\3\7\17\0\1\7\1\0\2\7\1\0\2\7"+
    "\2\0\4\7\6\0\3\7\3\0\5\7\1\0\3\7"+
    "\1\111\3\7\17\0\1\7\1\0\2\7\1\0\2\7"+
    "\2\0\4\7\6\0\3\7\3\0\3\7\1\112\1\7"+
    "\1\0\7\7\66\0\1\113\65\0\1\114\65\0\1\115"+
    "\14\0\1\116\66\0\1\117\1\0\1\120\62\0\1\121"+
    "\1\0\1\121\53\0\32\56\1\122\2\0\30\56\4\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\2\7\1\123"+
    "\1\7\6\0\3\7\3\0\5\7\1\0\7\7\17\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\3\7\1\124"+
    "\6\0\3\7\3\0\5\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\3\7"+
    "\3\0\1\7\1\125\3\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\1\7"+
    "\1\126\1\7\3\0\5\7\1\0\7\7\17\0\1\67"+
    "\1\0\2\67\1\0\2\67\2\0\4\67\5\0\1\127"+
    "\3\67\3\0\5\67\1\0\7\67\17\0\27\130\2\0"+
    "\30\130\7\0\1\71\1\0\1\71\1\131\1\0\1\132"+
    "\11\0\1\127\50\0\1\131\1\0\1\132\11\0\1\127"+
    "\42\0\1\7\1\0\2\7\1\0\2\7\2\0\4\7"+
    "\6\0\2\7\1\133\3\0\5\7\1\0\7\7\17\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\4\7\6\0"+
    "\1\134\2\7\3\0\5\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\1\7\1\135\2\7"+
    "\6\0\3\7\3\0\5\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\3\7\1\136\6\0"+
    "\3\7\3\0\1\7\1\137\3\7\1\0\7\7\17\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\3\7\1\140"+
    "\6\0\3\7\3\0\5\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\1\7\1\141\2\7"+
    "\6\0\3\7\3\0\5\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\1\7"+
    "\1\142\1\7\3\0\5\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\3\7"+
    "\3\0\5\7\1\0\3\7\1\143\3\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\3\7"+
    "\3\0\3\7\1\144\1\7\1\0\7\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\6\0\3\7"+
    "\3\0\5\7\1\0\3\7\1\145\3\7\17\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\1\7\1\146\2\7"+
    "\6\0\3\7\3\0\5\7\1\0\7\7\22\0\1\117"+
    "\1\0\1\117\1\0\1\147\64\0\1\147\51\0\13\56"+
    "\1\150\16\56\1\122\2\0\30\56\4\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\3\7\1\151\6\0\3\7"+
    "\3\0\5\7\1\0\7\7\17\0\1\7\1\0\2\7"+
    "\1\0\2\7\2\0\4\7\6\0\3\7\3\0\3\7"+
    "\1\152\1\7\1\0\7\7\17\0\1\7\1\0\2\7"+
    "\1\0\2\7\2\0\4\7\6\0\3\7\3\0\2\7"+
    "\1\153\2\7\1\0\7\7\17\0\1\154\1\155\1\154"+
    "\1\156\1\0\1\157\1\154\2\0\4\154\6\0\3\154"+
    "\3\0\5\154\1\0\7\154\20\0\1\160\66\0\1\161"+
    "\1\0\1\162\62\0\1\163\1\0\1\163\57\0\1\7"+
    "\1\0\2\7\1\0\2\7\2\0\4\7\1\164\5\0"+
    "\3\7\3\0\5\7\1\0\7\7\17\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\4\7\6\0\1\7\1\165"+
    "\1\7\3\0\5\7\1\0\7\7\17\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\4\7\6\0\3\7\3\0"+
    "\2\7\1\166\2\7\1\0\7\7\17\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\4\7\6\0\3\7\3\0"+
    "\4\7\1\167\1\0\7\7\17\0\1\7\1\0\2\7"+
    "\1\0\2\7\2\0\1\170\3\7\6\0\3\7\3\0"+
    "\5\7\1\0\7\7\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\5\7\1\0"+
    "\2\7\1\171\4\7\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\5\7\1\0"+
    "\4\7\1\172\2\7\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\1\7\1\173"+
    "\3\7\1\0\7\7\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\1\7\1\174"+
    "\3\7\1\0\7\7\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\5\7\1\0"+
    "\2\7\1\175\4\7\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\2\7\1\176"+
    "\2\7\1\0\7\7\22\0\1\177\1\0\1\200\57\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\4\7\1\201"+
    "\5\0\3\7\3\0\5\7\1\0\7\7\17\0\1\154"+
    "\1\0\2\154\1\0\2\154\2\0\4\154\1\0\1\202"+
    "\2\0\1\73\1\0\3\154\3\0\5\154\1\0\7\154"+
    "\17\0\27\203\2\0\30\203\7\0\1\156\1\0\1\156"+
    "\1\204\1\0\1\205\5\0\1\202\2\0\1\73\51\0"+
    "\1\204\1\0\1\205\5\0\1\202\2\0\1\73\65\0"+
    "\1\127\45\0\1\161\1\0\1\161\1\0\1\206\64\0"+
    "\1\206\60\0\1\163\1\0\1\163\14\0\1\127\42\0"+
    "\1\207\1\0\1\207\3\0\1\207\2\0\4\207\6\0"+
    "\3\207\3\0\5\207\1\0\7\207\17\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\4\7\6\0\3\7\3\0"+
    "\3\7\1\210\1\7\1\0\7\7\17\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\4\7\6\0\1\7\1\211"+
    "\1\7\3\0\5\7\1\0\7\7\17\0\1\7\1\0"+
    "\2\7\1\0\2\7\2\0\3\7\1\212\6\0\3\7"+
    "\3\0\5\7\1\0\7\7\17\0\1\7\1\0\2\7"+
    "\1\0\2\7\2\0\4\7\6\0\3\7\3\0\5\7"+
    "\1\0\2\7\1\213\4\7\17\0\1\7\1\0\2\7"+
    "\1\0\2\7\2\0\3\7\1\214\6\0\3\7\3\0"+
    "\5\7\1\0\7\7\22\0\1\177\1\0\1\177\57\0"+
    "\1\215\1\0\1\215\3\0\1\215\2\0\4\215\6\0"+
    "\3\215\3\0\5\215\1\0\7\215\17\0\1\67\1\70"+
    "\1\67\1\71\1\0\1\72\1\67\2\0\4\67\6\0"+
    "\3\67\3\0\5\67\1\0\7\67\20\0\1\216\66\0"+
    "\1\217\1\0\1\220\62\0\1\221\1\0\1\221\62\0"+
    "\1\163\1\0\1\160\57\0\1\207\1\0\2\207\1\0"+
    "\2\207\2\0\4\207\2\0\1\222\3\0\3\207\3\0"+
    "\5\207\1\0\7\207\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\2\7\1\223"+
    "\2\7\1\0\7\7\17\0\1\7\1\0\2\7\1\0"+
    "\2\7\2\0\4\7\6\0\3\7\3\0\5\7\1\0"+
    "\2\7\1\224\4\7\17\0\1\215\1\0\2\215\1\0"+
    "\2\215\2\0\4\215\1\0\1\225\4\0\3\215\3\0"+
    "\5\215\1\0\7\215\35\0\1\202\2\0\1\73\46\0"+
    "\1\217\1\0\1\217\1\0\1\226\64\0\1\226\60\0"+
    "\1\221\1\0\1\221\10\0\1\202\2\0\1\73\43\0"+
    "\1\7\1\0\2\7\1\0\2\7\2\0\4\7\6\0"+
    "\3\7\3\0\5\7\1\227\7\7\17\0\1\230\1\0"+
    "\1\230\3\0\1\230\2\0\4\230\6\0\3\230\3\0"+
    "\5\230\1\0\7\230\22\0\1\221\1\0\1\216\57\0"+
    "\1\230\1\0\2\230\1\0\2\230\2\0\4\230\2\0"+
    "\1\231\3\0\3\230\3\0\5\230\1\0\7\230\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5724];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\13\1\1\11\2\1\1\11"+
    "\6\1\1\11\6\1\1\11\2\1\7\11\4\0\6\1"+
    "\2\11\4\0\2\11\2\1\1\0\13\1\4\11\2\0"+
    "\1\1\1\0\4\1\4\0\14\1\1\0\4\1\11\0"+
    "\13\1\1\11\7\0\5\1\5\0\1\11\2\1\2\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}


	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 55: break;
        case 2: 
          { 
          }
        case 56: break;
        case 3: 
          { return symbol(sym.BOOLEAN_VALUE);
          }
        case 57: break;
        case 4: 
          { return symbol(sym.ID);
          }
        case 58: break;
        case 5: 
          { return symbol(sym.INTEGER_NUMBER);
          }
        case 59: break;
        case 6: 
          { return symbol(sym.DIVIDE);
          }
        case 60: break;
        case 7: 
          { return symbol(sym.LT);
          }
        case 61: break;
        case 8: 
          { return symbol(sym.COMMA);
          }
        case 62: break;
        case 9: 
          { return symbol(sym.GT);
          }
        case 63: break;
        case 10: 
          { return symbol(sym.LCURL);
          }
        case 64: break;
        case 11: 
          { return symbol(sym.RCURL);
          }
        case 65: break;
        case 12: 
          { return symbol(sym.COLON);
          }
        case 66: break;
        case 13: 
          { return symbol(sym.SEMI);
          }
        case 67: break;
        case 14: 
          { return symbol(sym.NOT);
          }
        case 68: break;
        case 15: 
          { return symbol(sym.EQ);
          }
        case 69: break;
        case 16: 
          { return symbol(sym.PLUS);
          }
        case 70: break;
        case 17: 
          { return symbol(sym.MINUS);
          }
        case 71: break;
        case 18: 
          { return symbol(sym.TIMES);
          }
        case 72: break;
        case 19: 
          { return symbol(sym.LPAREN);
          }
        case 73: break;
        case 20: 
          { return symbol(sym.RPAREN);
          }
        case 74: break;
        case 21: 
          { return symbol(sym.LBRACKET);
          }
        case 75: break;
        case 22: 
          { return symbol(sym.RBRACKET);
          }
        case 76: break;
        case 23: 
          { return symbol(sym.DO);
          }
        case 77: break;
        case 24: 
          { return symbol(sym.IN);
          }
        case 78: break;
        case 25: 
          { return symbol(sym.IF);
          }
        case 79: break;
        case 26: 
          { return symbol(sym.LTE);
          }
        case 80: break;
        case 27: 
          { return symbol(sym.GTE);
          }
        case 81: break;
        case 28: 
          { return symbol(sym.DICT_VALUE);
          }
        case 82: break;
        case 29: 
          { return symbol(sym.ASSIGN);
          }
        case 83: break;
        case 30: 
          { return symbol(sym.OD);
          }
        case 84: break;
        case 31: 
          { return symbol(sym.FI);
          }
        case 85: break;
        case 32: 
          { return symbol(sym.NEQ);
          }
        case 86: break;
        case 33: 
          { return symbol(sym.AND);
          }
        case 87: break;
        case 34: 
          { return symbol(sym.OR);
          }
        case 88: break;
        case 35: 
          { return symbol(sym.CHARACTER_VALUE);
          }
        case 89: break;
        case 36: 
          { return symbol(sym.FLOAT_NUMBER);
          }
        case 90: break;
        case 37: 
          { return symbol(sym.INTEGER_TYPE);
          }
        case 91: break;
        case 38: 
          { return symbol(sym.RATIONAL_TYPE);
          }
        case 92: break;
        case 39: 
          { return symbol(sym.CHARACTER_TYPE);
          }
        case 93: break;
        case 40: 
          { return symbol(sym.THEN);
          }
        case 94: break;
        case 41: 
          { return symbol(sym.ELSE);
          }
        case 95: break;
        case 42: 
          { return symbol(sym.MAIN);
          }
        case 96: break;
        case 43: 
          { return symbol(sym.READ);
          }
        case 97: break;
        case 44: 
          { return symbol(sym.FDEF);
          }
        case 98: break;
        case 45: 
          { return symbol(sym.BOOLEAN_TYPE);
          }
        case 99: break;
        case 46: 
          { return symbol(sym.RATIONAL_NUMBER);
          }
        case 100: break;
        case 47: 
          { return symbol(sym.WHILE);
          }
        case 101: break;
        case 48: 
          { return symbol(sym.FLOAT_TYPE);
          }
        case 102: break;
        case 49: 
          { return symbol(sym.PRINT);
          }
        case 103: break;
        case 50: 
          { return symbol(sym.SEQ_TYPE);
          }
        case 104: break;
        case 51: 
          { return symbol(sym.RETURN);
          }
        case 105: break;
        case 52: 
          { return symbol(sym.FORALL);
          }
        case 106: break;
        case 53: 
          { return symbol(sym.MAIN_RETURN);
          }
        case 107: break;
        case 54: 
          { return symbol(sym.DICT_TYPE);
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
