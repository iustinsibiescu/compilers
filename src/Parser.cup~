import java_cup.runtime.*;
   

parser code {:
    
    boolean syntaxErrors;
    
    public void syntax_error(Symbol current_token) {
		syntaxErrors = true;
    		report_error(
			"Syntax error at line " + (current_token.left+1) + ", column "
			+ current_token.right + current_token.toString() +"\n\n\n\n\n", null
		);
    }
    public void report_fatal_error(String message, Object info) {
    		report_error("", null);
    		done_parsing();
  }

:};
   

terminal ID, BOOLEAN_TYPE, CHARACTER_TYPE, INTEGER_TYPE, RATIONAL_TYPE, FLOAT_TYPE, BOOLEAN_VALUE, CHARACTER_VALUE, INTEGER_NUMBER, FLOAT_NUMBER, RATIONAL_NUMBER,  LPAREN, RPAREN, PLUS, MINUS, TIMES, DIVIDE, SEMI, COLON, ASSIGN, IF, FI, THEN, ELSE, WHILE, DO, OD, MAIN, LCURL, RCURL, COMMA, RETURN, FDEF;
non terminal Object  program, function_body, return, return_val, function_declr, main, body, whileblock, ifblock, declrs, stmts, stmt, declr, init_declr, normal_declr, assignment, type, expr, factor, term, numerical_val;

   program ::= function_body program
	       | main
	       ;

   function_body ::= FDEF ID LPAREN function_declr RPAREN LCURL body return RCURL COLON type SEMI
                    | FDEF ID LPAREN function_declr RPAREN LCURL body RCURL SEMI
		    ;

   return ::= RETURN return_val SEMI;

   return_val ::= expr
		  | CHAR_VALUE;

   function_declr ::= normal_declr COMMA function_declr
                   | normal_declr
                   |
                   ;

   main ::= MAIN LCURL body RCURL;

   body ::= declrs stmts
	    | stmts
            ;

   whileblock ::= WHILE LPAREN expr RPAREN DO body OD;

   ifblock ::= IF LPAREN expr RPAREN THEN body ELSE body FI
	      | IF LPAREN expr RPAREN THEN body FI 
	      ; 

   declrs ::= declrs declr
	    | declr;

   stmts ::= stmts stmt
            | stmt;

   stmt ::= ID assignment SEMI
            | ifblock
	    | whileblock
            ;

   declr ::= normal_declr SEMI
            | init_declr SEMI
            ;

   init_declr ::= normal_declr assignment;

   normal_declr ::= ID COLON type;

   assignment ::= ASSIGN expr
                  | ASSIGN CHAR_VALUE;

   type ::= INTEGER_TYPE
	    | FLOAT_TYPE
            | RATIONAL_TYPE
            | BOOLEAN_TYPE
            | CHARACTER_TYPE
	    ;
   
   
   expr      ::= expr PLUS factor
                 | expr MINUS factor
                 | factor
                 ;
   
   
   factor    ::= factor TIMES term
                 | factor DIVIDE term
                 | term
                 | MINUS term
                 ;
   
   
   term      ::= LPAREN expr RPAREN
                 | numerical_val
                 | ID
                 ;

   numerical_val ::= INTEGER_NUMBER
		     | FLOAT_NUMBER
		     | RATIONAL_NUMBER
                     ;
   
   
