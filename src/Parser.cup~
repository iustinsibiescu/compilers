import java_cup.runtime.*;
   

parser code {:
    
	boolean syntaxErrors;

	public void syntax_error(Symbol current_token) {
	syntaxErrors = true;
	report_error(
		"Syntax error at line " + (current_token.left+1) + ", column "
		+ current_token.right + current_token.toString() +"\n\n\n\n\n", null
	);
	}
	public void report_fatal_error(String message, Object info) {
		report_error("", null);
		done_parsing();
	}

:};
   

terminal 
	ID,
	BOOLEAN_TYPE,
	CHARACTER_TYPE,
	INTEGER_TYPE,
	RATIONAL_TYPE,
	FLOAT_TYPE,
	DICT_TYPE,
	BOOLEAN_VALUE,
	CHARACTER_VALUE,
	INTEGER_NUMBER,
	FLOAT_NUMBER,
	RATIONAL_NUMBER,
	LPAREN,
	RPAREN,
	PLUS,
	MINUS,
	TIMES,
	DIVIDE,
	GT,
	GTE,
	LT,
	LTE,
	EQ,
	NEQ,
	AND,
	OR,
	NOT,
	SEMI,
	COLON,
	ASSIGN,
	IF,
	FI,
	THEN,
	ELSE,
	WHILE,
	DO,
	OD,
	MAIN,
	LCURL,
	RCURL,
	COMMA,
	RETURN,
	MAIN_RETURN,
	FDEF;

non terminal Object
	program,
	function_body,
	return,
	return_val,
	function_declr,
	main,
	body,
	whileblock,
	ifblock,
	declrs,
	stmts,
	stmt,
	declr,
	init_declr,
	normal_declr,
	dict_declr,
	dict_body,
	assignment,
	type,
	loc,
	param_list,
	bool,
	join,
	equality,
	rel,
	expr,
	term,
	unary,
	factor,
	numerical_val;


	program ::= 
		function_body program
		| declr program 
		| main
		;

	function_body ::= 
		FDEF ID LPAREN function_declr RPAREN LCURL body return RCURL COLON type SEMI
		| FDEF ID LPAREN function_declr RPAREN LCURL body RCURL SEMI
		;

	return ::= 
		RETURN return_val SEMI
		;

	return_val ::= 
		bool
		;

	function_declr ::= 
		normal_declr COMMA function_declr
		| normal_declr
		|
		;

	main ::= 
		MAIN LCURL body RCURL
		;

	body ::= 
		declrs stmts
		| stmts
		;

	whileblock ::= 
		WHILE LPAREN bool RPAREN DO body OD
		;

	ifblock ::= 
		IF LPAREN bool RPAREN THEN body ELSE body FI
		| IF LPAREN bool RPAREN THEN body FI 
		; 

	declrs ::= 
		declrs declr
		| declr
		;

	stmts ::= 
		stmts stmt
		| stmt
		;

	stmt ::= 
		ID assignment SEMI
		| ifblock
		| whileblock
		| MAIN_RETURN
		;

	

	declr ::= 
		normal_declr SEMI
		| init_declr SEMI
		| dict_declr SEMI
		;

	init_declr ::= 
		normal_declr assignment
		;

	normal_declr ::= 
		ID COLON type
		;

	dict_declr ::=
		ID COLON DICT_TYPE ASSIGN LCURL dict_body RCURL
		;

	dict_body ::=
		loc COLON loc COMMA dict_body
		| loc COLON loc
		|
		;

	assignment ::= 
		ASSIGN bool
		;

	type ::= 
		INTEGER_TYPE
		| FLOAT_TYPE
		| RATIONAL_TYPE
		| BOOLEAN_TYPE
		| CHARACTER_TYPE
		;




	loc ::=
		ID
		| numerical_val
		| BOOLEAN_VALUE
		| CHARACTER_VALUE
		| ID LPAREN param_list RPAREN
		;	

	param_list ::=
		bool COMMA param_list
		| bool
		;

	bool ::= 
		bool OR join 
		| join
		;

	join ::= 
		join AND equality
		| equality
		;

	equality ::=
		equality EQ rel
		| equality NEQ rel
		| rel
		;

	rel ::=
		expr LT expr
		| expr LTE expr
		| expr GTE expr
		| expr GT expr
		| expr
		;

	expr ::=
		expr PLUS term
		| expr MINUS term
		| term
		;
	
	term ::=
		term TIMES unary
		| term DIVIDE unary
		| unary
		;

	unary ::=
		NOT unary
		| MINUS unary
		| factor
		;

	factor ::=
		LPAREN bool RPAREN
		| loc
		;
		
	numerical_val ::= 
		INTEGER_NUMBER
		| FLOAT_NUMBER
		| RATIONAL_NUMBER
		;
   
   
